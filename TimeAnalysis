1) O(1): Time complexity of a function (or set of statements) is considered as O(1) 
if it doesnâ€™t contain loop, recursion and call to any other non-constant time 
function.
Example:- swap()
A loop or recursion that runs a constant number of times is also considered as O(1). For example the following loop is O(1).

   // Here c is a constant   
   for (int i = 1; i <= c; i++) {  
        // some O(1) expressions
   }

2) O(n^c): Time complexity of nested loops is equal to the number of times the 
innermost statement is executed. For example the following sample loops have O(n^2) 
time complexity.

   for (int i = 1; i <=n; i += c) {
       for (int j = 1; j <=n; j += c) {
          // some O(1) expressions
       }
   }

   for (int i = n; i > 0; i -= c) {
       for (int j = i+1; j <=n; j += c) {
          // some O(1) expressions
   }

3) O(Logn) Time Complexity of a loop is considered as O(Logn) if the loop variables 
is divided / multiplied by a constant amount.

   for (int i = 1; i <=n; i *= c) {
       // some O(1) expressions
   }
   for (int i = n; i > 0; i /= c) {
       // some O(1) expressions
   }

4) O(LogLogn) Time Complexity of a loop is considered as O(LogLogn) if the loop 
variables is reduced / increased exponentially by a constant amount.

   // Here c is a constant greater than 1   
   for (int i = 2; i <=n; i = pow(i, c)) { 
       // some O(1) expressions
   }
   //Here fun is sqrt or cuberoot or any other constant root
   for (int i = n; i > 1; i = fun(i)) { 
       // some O(1) expressions
   }